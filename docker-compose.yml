networks:
    frontend_network:
        name: frontend_network
        driver: bridge
    backend_network:
        name: backend_network
        driver: bridge

services:
  postgres:
    container_name: postgres
    image: postgres:latest
    deploy:
        resources:
            limits:
                cpus: '0.25'
                memory: 64M
    volumes:
        - postgres-data:/var/lib/postgresql/data
    restart: always
    environment:
        POSTGRES_DB: ${POSTGRES_DB}
        POSTGRES_USER: ${POSTGRES_USER}
        POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
        - '5432:${POSTGRES_PORT}'
    networks:
        - backend_network  
    healthcheck:
        test: 'pg_isready -U ${POSTGRES_USER}'
        interval: 10s
        timeout: 3s
        retries: 5
  redis_cache:
    container_name: redis_cache
    image: redis:7.2.4-alpine
    deploy:
        resources:
            limits:
                cpus: '0.125'
                memory: 96M
    restart: always
    environment:
        REDIS_PORT: ${REDIS_CACHE_PORT}
        REDIS_DATABASES: ${REDIS_CACHE_DATABASES}
    command: redis-server --save 60 10
    ports:
        - '${REDIS_CACHE_PORT}'
    volumes: 
        - redis_cache:/var/lib/data
    networks:
        - backend_network
  backend:
    container_name: backend_takejoboffer
    build:
        context: .
        dockerfile: /TakeJobOffer.API/API.Dockerfile
    deploy:
        resources:
            limits:
                cpus: '0.25'
                memory: 256M
    restart: always
    environment:
        ASPNETCORE_ENVIRONMENT: ${ASPNETCORE_ENVIRONMENT}
        ASPNETCORE_HTTPS_PORTS: ${ASPNETCORE_HTTPS_PORTS}
        ASPNETCORE_HTTP_PORTS: ${ASPNETCORE_HTTP_PORTS}
        ASPNETCORE_Kestrel__Certificates__Default__Password: ${ASPNETCORE_Kestrel__Certificates__Default__Password}
        ASPNETCORE_Kestrel__Certificates__Default__Path: ${ASPNETCORE_Kestrel__Certificates__Default__Path}
    ports:
        - '8080:${ASPNETCORE_HTTP_PORTS}'
        - '8081:${ASPNETCORE_HTTPS_PORTS}'
    networks:
        - frontend_network
        - backend_network
    volumes:
        - ~/.aspnet/https:/home/app/.aspnet/https:ro
    depends_on:
        postgres:
            condition: service_healthy
            restart: true
        redis_cache:
            condition: service_started
            restart: true
    healthcheck:
        test: curl --fail http://localhost:${ASPNETCORE_HTTP_PORTS}/health || exit 1
        interval: 10s
        timeout: 3s
        retries: 5
        start_period: 3s
  frontend:
    container_name: frontend_takejoboffer
    build:
        context: ./Frontend/takejobofferfrontend
        dockerfile: Frontend.Dockerfile
    restart: always
    deploy:
        resources:
            limits:
                cpus: '0.25'
                memory: 128M
    ports:
        - '3000:${FRONTEND_PORT}'
    networks:
        - frontend_network
    depends_on:
        backend:
            condition: service_healthy
            restart: true

volumes:
    postgres-data:
    redis_cache:
