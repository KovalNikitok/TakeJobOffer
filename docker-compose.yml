version: '3.9'

networks:
    frontend_network:
        name: frontend_network
        driver: bridge
    backend_network:
        name: backend_network
        driver: bridge

services:
  postgres:
    container_name: postgres
    image: postgres:latest
    deploy:
        resources:
            limits:
                cpus: '0.25'
                memory: 256M
    environment:
        POSTGRES_DB: "takejobofferdb"
        POSTGRES_USER: "postgres"
        POSTGRES_PASSWORD: "123"
    volumes:
        - postgres-data:/var/lib/postgresql/data
    restart: always
    ports:
        - "5432:5432"
    networks:
        - backend_network  
    healthcheck:
        test: pg_isready -U $$POSTGRES_USER
        interval: 10s
        timeout: 3s
        retries: 5
        start_period: 3s
  backend:
    container_name: backend_takejoboffer
    build:
        context: .
        dockerfile: /TakeJobOffer.API/API.Dockerfile
    deploy:
        resources:
            limits:
                cpus: '0.25'
                memory: 512M
    restart: always
    ports:
        - "8080:8080"
        - "8081:8081"
    networks:
        - frontend_network
        - backend_network
    depends_on: 
        postgres:
            condition: service_healthy
    healthcheck:
        test: "curl --fail http://localhost:8080/health || exit 1"
        interval: 15s
        timeout: 5s
        retries: 5
        start_period: 5s
  frontend:
    container_name: frontend_takejoboffer
    build:
        context: ./Frontend/takejobofferfrontend
        dockerfile: Frontend.Dockerfile
    restart: always
    deploy:
        resources:
            limits:
                cpus: '0.25'
                memory: 512M
    ports:
        - "3000:3000"
    networks:
        - frontend_network
    depends_on:
        backend:
            condition: service_healthy

    
volumes:
    postgres-data:
