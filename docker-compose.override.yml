networks:
    frontend_network:
        name: frontend_network
        driver: bridge
    backend_network:
        name: backend_network
        driver: bridge

services:
  postgres:
    container_name: postgres
    image: postgres:16.3-alpine3.19
    deploy:
        resources:
            limits:
                cpus: '0.05'
                memory: 48M
    volumes:
        - postgres-data:/var/lib/postgresql/data
    restart: always
    environment:
        POSTGRES_DB: "takejobofferdb"
        POSTGRES_USER: "postgres"
        POSTGRES_PASSWORD: "123"
    ports:
        - "5432:5432"
    networks:
        - backend_network
    healthcheck:
        test: pg_isready -U $$POSTGRES_USER
        interval: 5s
        timeout: 3s
        retries: 5
        start_period: 3s
  redis_cache:
    container_name: redis_cache
    image: redis:7.2.4-alpine
    deploy:
        resources:
            limits:
                cpus: '0.05'
                memory: 64M
    restart: always
    environment:
        REDIS_PORT: 6379
        REDIS_DATABASES: 1
    command: redis-server --save 60 10
    ports:
        - "6379:6379"
    networks:
        - backend_network
  backend:
    container_name: backend_takejoboffer
    build:
        context: .
        dockerfile: /TakeJobOffer.API/API.Dockerfile
    deploy:
        resources:
            limits:
                cpus: '0.2'
                memory: 160M
    restart: always
    ports:
        - "8080:8080"
        - "8081:8081"
    environment:
        ASPNETCORE_ENVIRONMENT: "Development"
        ASPNETCORE_HTTPS_PORTS: 8081
        ASPNETCORE_HTTP_PORTS: 8080
        ASPNETCORE_Kestrel__Certificates__Default__Password: 123
        ASPNETCORE_Kestrel__Certificates__Default__Path: /home/app/.aspnet/https/takejoboffer.ru.pfx
    volumes:
        - ~/.aspnet/https:/home/app/.aspnet/https:ro
    depends_on:
        postgres:
            condition: service_healthy
            restart: true
        redis_cache:
            condition: service_started
            restart: true
    healthcheck:
        test: curl --fail http://localhost:8080/health || exit 1
        interval: 5s
        timeout: 3s
        retries: 5
        start_period: 500ms
    networks:
        - frontend_network
        - backend_network
  frontend:
    container_name: frontend_takejoboffer
    build:
        context: ./Frontend/Web
        dockerfile: Frontend.Dockerfile
    restart: always
    deploy:
        resources:
            limits:
                cpus: '0.15'
                memory: 96M
    ports:
        - "3000:3000"
    depends_on: 
        backend:
            condition: service_healthy
            restart: true
    networks:
        - frontend_network
  nginx:
    image: nginx:1.25.5-alpine
    container_name: nginx
    restart: always
    deploy:
        resources:
            limits:
                cpus: '0.05'
                memory: 16M
    ports:
        - "80:80"
        - "443:443"
    volumes:
        - ./ReverseProxy/static:/static
        - ./ReverseProxy/nginx/Development:/etc/nginx/conf.d/
        - ssl-acme:/var/www/certbot:ro
        - ssl-cert:/etc/letsencrypt:ro
    depends_on:
        backend:
            condition: service_healthy
            restart: true
        frontend:
            condition: service_started
            restart: true
    networks:
        - frontend_network

volumes:
    postgres-data:
    ssl-acme:
    ssl-cert:
