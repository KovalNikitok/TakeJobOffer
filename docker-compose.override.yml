version: '3.9'

networks:
    frontend_network:
        name: frontend_network
        driver: bridge
    backend_network:
        name: backend_network
        driver: bridge

services:
  postgres:
    container_name: postgres
    image: postgres:latest
    deploy:
        resources:
            limits:
                cpus: '0.25'
                memory: 64M
    environment:
        POSTGRES_DB: "takejobofferdb"
        POSTGRES_USER: "postgres"
        POSTGRES_PASSWORD: "123"
    volumes:
        - postgres-data:/var/lib/postgresql/data
    restart: always
    ports:
        - "5432:5432"
    networks:
        - backend_network
  backend:
    container_name: backend_takejoboffer
    build:
        context: .
        dockerfile: /TakeJobOffer.API/API.Dockerfile
    deploy:
        resources:
            limits:
                cpus: '0.25'
                memory: 256M
    restart: always
    ports:
        - "8080:8080"
        - "8081:8081"
    environment:
        ASPNETCORE_ENVIRONMENT: "Development"
        ASPNETCORE_HTTPS_PORTS: 8081
        ASPNETCORE_HTTP_PORTS: 8080
        ASPNETCORE_Kestrel__Certificates__Default__Password: 123
        ASPNETCORE_Kestrel__Certificates__Default__Path: /home/app/.aspnet/https/TakeJobOffer.API.pfx
    volumes:
        - ~/.aspnet/https:/home/app/.aspnet/https:ro
    depends_on: 
        postgres:
            condition: service_completed_successfully
    networks:
        - frontend_network
        - backend_network
  frontend:
    container_name: frontend_takejoboffer
    build:
        context: ./Frontend/takejobofferfrontend
        dockerfile: Frontend.Dockerfile
    restart: always
    deploy:
        resources:
            limits:
                cpus: '0.25'
                memory: 128M
    ports:
        - "3000:3000"
    depends_on: 
        backend:
            condition: service_completed_successfully
    networks:
        - frontend_network
volumes:
    postgres-data:
